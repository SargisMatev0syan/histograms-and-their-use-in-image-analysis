# Ներբեռնում ենք անհրաժեշտ գրադարանները
if (!require(imager)) install.packages("imager")
if (!require(ggplot2)) install.packages("ggplot2")
if (!requireNamespace("BiocManager", quietly = TRUE)) install.packages("BiocManager")
BiocManager::install("EBImage")


library(imager)
library(ggplot2)
library(EBImage)

# Ներբեռնում ենք մեր նախընտրած նկարը ֆայլից
image_path <- "/mnt/data/image.jpg" 
image <- load.image(image_path)

# Ցուցադրել սկզբնական նկարը
plot(image, main = "Original Image")

# Բերել նկարը Grayscale տարբերակի
gray_image <- grayscale(image)

# Ցուցադրել grayscale նկարը
plot(gray_image, main = "Grayscale Image")



# Ստեղծել հիստոգրամ  grayscale նկարի համար 

gray_values <- as.vector(gray_image)
ggplot(data.frame(gray_values), aes(x = gray_values)) + 
  geom_histogram(binwidth = 1, fill = "blue", color = "black") + 
  labs(title = "Grayscale Histogram", x = "Intensity", y = "Frequency")


# Դուրս բերել երանգները

red_channel <- as.vector(image[,,1])
green_channel <- as.vector(image[,,2])
blue_channel <- as.vector(image[,,3])

# Ստեղծել հիստոգրամ յուրաքանչյուր երանգի համար

par(mfrow = c(3, 1))
hist(red_channel, breaks = 256, col = "red", main = "Red Channel Histogram", xlab = "Intensity", ylab = "Frequency")
hist(green_channel, breaks = 256, col = "green", main = "Green Channel Histogram", xlab = "Intensity", ylab = "Frequency")
hist(blue_channel, breaks = 256, col = "blue", main = "Blue Channel Histogram", xlab = "Intensity", ylab = "Frequency")

#Ձեռքով կատարենք հիստոգրամի հավասարեցումը
hist_vals <- hist(gray_image, plot = FALSE)

# Հաշվարկենք CDF-ը ( cumulative distribution function)
cdf <- cumsum(hist_vals$counts) / sum(hist_vals$counts)

# Համապատասխանեցնենք պիքսելների արժեքները հավասարեցված արժեքներին CDF-ի օգնությամբ
equalized_image <- gray_image
for (i in 1:length(cdf)) {
  equalized_image[gray_image == hist_vals$breaks[i]] <- cdf[i]
}

# Նորմալիզացնենք պիքսելների արժեքները  [0 , 1] միջակայքում
equalized_image <- as.cimg(equalized_image)

# Ցուցադրենք հավասարեցված grayscale պատկերը
plot(equalized_image, main = "Equalized Grayscale Image")

# Ցուցադրենք սկզբնական և հավասարեցված հիստոգրամները
par(mfrow = c(2, 1))
hist(as.vector(gray_image), breaks = 256, col = "gray", main = "Original Grayscale Histogram", xlab = "Intensity", ylab = "Frequency")
hist(as.vector(equalized_image), breaks = 256, col = "gray", main = "Equalized Grayscale Histogram", xlab = "Intensity", ylab = "Frequency")


# Կիրառենք  thresholding օգտագործելով  EBImage-ը
threshold <- otsu(as.Image(gray_image)) 
binary_image <- gray_image > threshold

# Ցուցադրել binary պատկերը
display(as.Image(binary_image), title = "Binary Image after Thresholding")

# Սեգմենտացիա հիմնված հիստոգրամի գագաթների վրա (պարզ thresholding)
segmented_image <- bwlabel(binary_image)

#Ցուցադրենք սեգմենտացված նկարը
display(segmented_image, title = "Segmented Image")




import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
import cv2
import seaborn as sns

# Ներբեռնենք պատկերը
image_path = "/mnt/data/project nkar.jpg"
image = Image.open(image_path)

# Ցուցադրենք սկզբնական նկարը
plt.imshow(image)
plt.title("Original Image")
plt.axis('off')
plt.show()

# Փոխակերպենք պատկերը  grayscale-ի
gray_image = image.convert("L")

# Ցուցադրենք grayscale նկարը
plt.imshow(gray_image, cmap='gray')
plt.title("Grayscale Image")
plt.axis('off')
plt.show()

#Ստեղծել հիստոգրամ  grayscale նկարի համար
gray_values = np.array(gray_image).flatten()
sns.histplot(gray_values, bins=256, color='blue')
plt.title("Grayscale Histogram")
plt.xlabel("Intensity")
plt.ylabel("Frequency")
plt.show()

# Դուրս բերել երանգները
image_np = np.array(image)
red_channel = image_np[:,:,0].flatten()
green_channel = image_np[:,:,1].flatten()
blue_channel = image_np[:,:,2].flatten()

#Ստեղծել հիստոգրամ յուրաքանչյուր երանգի համար
plt.figure(figsize=(10, 15))
plt.subplot(3, 1, 1)
sns.histplot(red_channel, bins=256, color='red')
plt.title("Red Channel Histogram")
plt.xlabel("Intensity")
plt.ylabel("Frequency")

plt.subplot(3, 1, 2)
sns.histplot(green_channel, bins=256, color='green')
plt.title("Green Channel Histogram")
plt.xlabel("Intensity")
plt.ylabel("Frequency")

plt.subplot(3, 1, 3)
sns.histplot(blue_channel, bins=256, color='blue')
plt.title("Blue Channel Histogram")
plt.xlabel("Intensity")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()

# Ձեռքով կատարենք հիստոգրամի հավասարեցումը
hist_vals, bin_edges = np.histogram(gray_values, bins=256, range=(0, 256))
cdf = hist_vals.cumsum()
cdf_normalized = cdf / cdf.max()

equalized_image = np.interp(gray_values, bin_edges[:-1], cdf_normalized * 255)
equalized_image = equalized_image.reshape(gray_image.size[::-1])

# Ցուցադրենք հավասարեցված grayscale պատկերը
plt.imshow(equalized_image, cmap='gray')
plt.title("Equalized Grayscale Image")
plt.axis('off')
plt.show()

# Ցուցադրենք սկզբնական և հավասարեցված հիստոգրամները
plt.figure(figsize=(10, 10))
plt.subplot(2, 1, 1)
sns.histplot(gray_values, bins=256, color='gray')
plt.title("Original Grayscale Histogram")
plt.xlabel("Intensity")
plt.ylabel("Frequency")

plt.subplot(2, 1, 2)
sns.histplot(equalized_image.flatten(), bins=256, color='gray')
plt.title("Equalized Grayscale Histogram")
plt.xlabel("Intensity")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()

# Կիրառենք thresholding օգտագործելով Otsu-ի մեթոդը
_, binary_image = cv2.threshold(np.array(gray_image), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)

# Ցուցադրել  binary նկարը
plt.imshow(binary_image, cmap='gray')
plt.title("Binary Image after Thresholding")
plt.axis('off')
plt.show()

# Սեգմենտացիա հիմնված հիստոգրամի գագաթների վրա (պարզ thresholding)
num_labels, labels_im = cv2.connectedComponents(binary_image)

# Ցուցադրել սեգմենտացիա նկարը
plt.imshow(labels_im, cmap='nipy_spectral')
plt.title("Segmented Image")
plt.axis('off')
plt.show()

#Ադապտացված հիստոգրամի հավասարեցում օգտագործելով CLAHE
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
ahe_image = clahe.apply(np.array(gray_image))

# Ցուցադրենք ադապտացված հիստոգրամի հավասարեցված նկարը
plt.imshow(ahe_image, cmap='gray')
plt.title("Adaptive Histogram Equalized Image")
plt.axis('off')
plt.show()

#Կիրառենք multi-level thresholding օգտագործելով Otsu-ի մեթոդը
thresh1 = cv2.threshold(np.array(gray_image), 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[0]
thresh2 = cv2.threshold(np.array(gray_image), thresh1, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[0]
multi_thresh_image = np.digitize(np.array(gray_image), bins=[thresh1, thresh2])

# Ցուցադրել  multi-level thresholded նկարը
plt.imshow(multi_thresh_image, cmap='gray')
plt.title("Multi-level Thresholded Image")
plt.axis('off')
plt.show()



# Եզրերի Հայտնաբերում օգտագործելով Canny
edges = cv2.Canny(np.array(gray_image), 100, 200)

# Ցուցադրել եզրերը
plt.imshow(edges, cmap='gray')
plt.title("Edge Detection using Canny")
plt.axis('off')
plt.show()



# Աղմուկի նվազեցում օգտագործելով Gaussian Blur
blurred_image = cv2.GaussianBlur(np.array(gray_image), (5, 5), 0)

# Ցուցադրենք լղոզված պատկերը
plt.imshow(blurred_image, cmap='gray')
plt.title("Noise Reduction using Gaussian Blur")
plt.axis('off')
plt.show()



# Feature Extraction օգտագործելով Harris Corner Detection
gray_image_np = np.float32(np.array(gray_image))
dst = cv2.cornerHarris(gray_image_np, 2, 3, 0.04)

#Արդյունքը լայնացվում է անկյունները նշելու համար
dst = cv2.dilate(dst, None)

# Կիրառենք threshold օպտիմալ արժեքի համար,այն  կարող է տարբերվել կախված նկարից
image_np[dst > 0.01 * dst.max()] = [255, 0, 0]

#Ցուցադրենք պատկերը անկյուններով
plt.imshow(image_np)
plt.title("Feature Extraction using Harris Corner Detection")
plt.axis('off')
plt.show()
